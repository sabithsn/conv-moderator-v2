Document: ID=86B4A50B.text (1 sentences, 50 tokens)

Sentence #1 (50 tokens):
I can tell you this for sure: i barely graduated high school, but am totally qualified to call something fake on the premise that if "I" don't understand how it works, than its clearly a conspiracy   Is this the right sub for that?

Tokens:
[Text=I CharacterOffsetBegin=0 CharacterOffsetEnd=1 PartOfSpeech=PRP Lemma=I NamedEntityTag=O]
[Text=can CharacterOffsetBegin=2 CharacterOffsetEnd=5 PartOfSpeech=MD Lemma=can NamedEntityTag=O]
[Text=tell CharacterOffsetBegin=6 CharacterOffsetEnd=10 PartOfSpeech=VB Lemma=tell NamedEntityTag=O]
[Text=you CharacterOffsetBegin=11 CharacterOffsetEnd=14 PartOfSpeech=PRP Lemma=you NamedEntityTag=O]
[Text=this CharacterOffsetBegin=15 CharacterOffsetEnd=19 PartOfSpeech=DT Lemma=this NamedEntityTag=O]
[Text=for CharacterOffsetBegin=20 CharacterOffsetEnd=23 PartOfSpeech=IN Lemma=for NamedEntityTag=O]
[Text=sure CharacterOffsetBegin=24 CharacterOffsetEnd=28 PartOfSpeech=JJ Lemma=sure NamedEntityTag=O]
[Text=: CharacterOffsetBegin=28 CharacterOffsetEnd=29 PartOfSpeech=: Lemma=: NamedEntityTag=O]
[Text=i CharacterOffsetBegin=30 CharacterOffsetEnd=31 PartOfSpeech=PRP Lemma=i NamedEntityTag=O]
[Text=barely CharacterOffsetBegin=32 CharacterOffsetEnd=38 PartOfSpeech=RB Lemma=barely NamedEntityTag=O]
[Text=graduated CharacterOffsetBegin=39 CharacterOffsetEnd=48 PartOfSpeech=VBD Lemma=graduate NamedEntityTag=O]
[Text=high CharacterOffsetBegin=49 CharacterOffsetEnd=53 PartOfSpeech=JJ Lemma=high NamedEntityTag=O]
[Text=school CharacterOffsetBegin=54 CharacterOffsetEnd=60 PartOfSpeech=NN Lemma=school NamedEntityTag=O]
[Text=, CharacterOffsetBegin=60 CharacterOffsetEnd=61 PartOfSpeech=, Lemma=, NamedEntityTag=O]
[Text=but CharacterOffsetBegin=62 CharacterOffsetEnd=65 PartOfSpeech=CC Lemma=but NamedEntityTag=O]
[Text=am CharacterOffsetBegin=66 CharacterOffsetEnd=68 PartOfSpeech=VBP Lemma=be NamedEntityTag=O]
[Text=totally CharacterOffsetBegin=69 CharacterOffsetEnd=76 PartOfSpeech=RB Lemma=totally NamedEntityTag=O]
[Text=qualified CharacterOffsetBegin=77 CharacterOffsetEnd=86 PartOfSpeech=JJ Lemma=qualified NamedEntityTag=O]
[Text=to CharacterOffsetBegin=87 CharacterOffsetEnd=89 PartOfSpeech=TO Lemma=to NamedEntityTag=O]
[Text=call CharacterOffsetBegin=90 CharacterOffsetEnd=94 PartOfSpeech=VB Lemma=call NamedEntityTag=O]
[Text=something CharacterOffsetBegin=95 CharacterOffsetEnd=104 PartOfSpeech=NN Lemma=something NamedEntityTag=O]
[Text=fake CharacterOffsetBegin=105 CharacterOffsetEnd=109 PartOfSpeech=JJ Lemma=fake NamedEntityTag=O]
[Text=on CharacterOffsetBegin=110 CharacterOffsetEnd=112 PartOfSpeech=IN Lemma=on NamedEntityTag=O]
[Text=the CharacterOffsetBegin=113 CharacterOffsetEnd=116 PartOfSpeech=DT Lemma=the NamedEntityTag=O]
[Text=premise CharacterOffsetBegin=117 CharacterOffsetEnd=124 PartOfSpeech=NN Lemma=premise NamedEntityTag=O]
[Text=that CharacterOffsetBegin=125 CharacterOffsetEnd=129 PartOfSpeech=IN Lemma=that NamedEntityTag=O]
[Text=if CharacterOffsetBegin=130 CharacterOffsetEnd=132 PartOfSpeech=IN Lemma=if NamedEntityTag=O]
[Text=" CharacterOffsetBegin=133 CharacterOffsetEnd=134 PartOfSpeech=`` Lemma=" NamedEntityTag=O]
[Text=I CharacterOffsetBegin=134 CharacterOffsetEnd=135 PartOfSpeech=PRP Lemma=I NamedEntityTag=O]
[Text=" CharacterOffsetBegin=135 CharacterOffsetEnd=136 PartOfSpeech=`` Lemma=" NamedEntityTag=O]
[Text=do CharacterOffsetBegin=137 CharacterOffsetEnd=139 PartOfSpeech=VBP Lemma=do NamedEntityTag=O]
[Text=n't CharacterOffsetBegin=139 CharacterOffsetEnd=142 PartOfSpeech=RB Lemma=not NamedEntityTag=O]
[Text=understand CharacterOffsetBegin=143 CharacterOffsetEnd=153 PartOfSpeech=VB Lemma=understand NamedEntityTag=O]
[Text=how CharacterOffsetBegin=154 CharacterOffsetEnd=157 PartOfSpeech=WRB Lemma=how NamedEntityTag=O]
[Text=it CharacterOffsetBegin=158 CharacterOffsetEnd=160 PartOfSpeech=PRP Lemma=it NamedEntityTag=O]
[Text=works CharacterOffsetBegin=161 CharacterOffsetEnd=166 PartOfSpeech=VBZ Lemma=work NamedEntityTag=O]
[Text=, CharacterOffsetBegin=166 CharacterOffsetEnd=167 PartOfSpeech=, Lemma=, NamedEntityTag=O]
[Text=than CharacterOffsetBegin=168 CharacterOffsetEnd=172 PartOfSpeech=IN Lemma=than NamedEntityTag=O]
[Text=its CharacterOffsetBegin=173 CharacterOffsetEnd=176 PartOfSpeech=PRP$ Lemma=its NamedEntityTag=O]
[Text=clearly CharacterOffsetBegin=177 CharacterOffsetEnd=184 PartOfSpeech=RB Lemma=clearly NamedEntityTag=O]
[Text=a CharacterOffsetBegin=185 CharacterOffsetEnd=186 PartOfSpeech=DT Lemma=a NamedEntityTag=O]
[Text=conspiracy CharacterOffsetBegin=187 CharacterOffsetEnd=197 PartOfSpeech=NN Lemma=conspiracy NamedEntityTag=CRIMINAL_CHARGE]
[Text=Is CharacterOffsetBegin=200 CharacterOffsetEnd=202 PartOfSpeech=VBZ Lemma=be NamedEntityTag=O]
[Text=this CharacterOffsetBegin=203 CharacterOffsetEnd=207 PartOfSpeech=DT Lemma=this NamedEntityTag=O]
[Text=the CharacterOffsetBegin=208 CharacterOffsetEnd=211 PartOfSpeech=DT Lemma=the NamedEntityTag=O]
[Text=right CharacterOffsetBegin=212 CharacterOffsetEnd=217 PartOfSpeech=NN Lemma=right NamedEntityTag=O]
[Text=sub CharacterOffsetBegin=218 CharacterOffsetEnd=221 PartOfSpeech=NN Lemma=sub NamedEntityTag=O]
[Text=for CharacterOffsetBegin=222 CharacterOffsetEnd=225 PartOfSpeech=IN Lemma=for NamedEntityTag=O]
[Text=that CharacterOffsetBegin=226 CharacterOffsetEnd=230 PartOfSpeech=DT Lemma=that NamedEntityTag=O]
[Text=? CharacterOffsetBegin=230 CharacterOffsetEnd=231 PartOfSpeech=. Lemma=? NamedEntityTag=O]

Constituency parse: 
(ROOT
  (SQ
    (S
      (S
        (NP (PRP I))
        (VP (MD can)
          (VP (VB tell)
            (NP (PRP you))
            (NP
              (NP (DT this))
              (PP (IN for)
                (ADJP (JJ sure)))))))
      (: :)
      (S
        (NP (PRP i))
        (ADVP (RB barely))
        (VP
          (VP (VBD graduated)
            (NP (JJ high) (NN school)))
          (, ,)
          (CC but)
          (VP (VBP am)
            (ADJP (RB totally) (JJ qualified)
              (S
                (VP (TO to)
                  (VP (VB call)
                    (NP
                      (NP (NN something))
                      (VP (JJ fake)
                        (PP (IN on)
                          (NP (DT the) (NN premise)))
                        (SBAR (IN that) (IN if)
                          (S (`` ")
                            (NP (PRP I))
                            (`` ")
                            (VP (VBP do) (RB n't)
                              (VP (VB understand)))))
                        (SBAR
                          (WHADVP (WRB how))
                          (S
                            (NP (PRP it))
                            (VP (VBZ works))))))
                    (, ,)
                    (PP (IN than)
                      (NP (PRP$ its)
                        (ADJP (RB clearly) (DT a))
                        (NN conspiracy)))))))))))
    (SQ (VBZ Is)
      (NP (DT this))
      (NP
        (NP (DT the) (NN right) (NN sub))
        (PP (IN for)
          (NP (DT that)))))
    (. ?)))


Dependency Parse (enhanced plus plus dependencies):
root(ROOT-0, sub-47)
nsubj(tell-3, I-1)
aux(tell-3, can-2)
dep(sub-47, tell-3)
iobj(tell-3, you-4)
obj(tell-3, this-5)
case(sure-7, for-6)
acl:for(this-5, sure-7)
punct(tell-3, :-8)
nsubj(graduated-11, i-9)
nsubj(qualified-18, i-9)
nsubj:xsubj(call-20, i-9)
advmod(graduated-11, barely-10)
parataxis(tell-3, graduated-11)
amod(school-13, high-12)
obj(graduated-11, school-13)
punct(graduated-11, ,-14)
cc(qualified-18, but-15)
cop(qualified-18, am-16)
advmod(qualified-18, totally-17)
parataxis(tell-3, qualified-18)
conj:but(graduated-11, qualified-18)
mark(call-20, to-19)
xcomp(qualified-18, call-20)
obj(call-20, something-21)
dep(something-21, fake-22)
case(premise-25, on-23)
det(premise-25, the-24)
obl:on(fake-22, premise-25)
mark(understand-33, that-26)
mark(understand-33, if-27)
punct(understand-33, "-28)
nsubj(understand-33, I-29)
punct(understand-33, "-30)
aux(understand-33, do-31)
advmod(understand-33, n't-32)
advcl:that(fake-22, understand-33)
advmod(works-36, how-34)
nsubj(works-36, it-35)
ccomp(fake-22, works-36)
punct(call-20, ,-37)
case(conspiracy-42, than-38)
nmod:poss(conspiracy-42, its-39)
advmod(a-41, clearly-40)
amod(conspiracy-42, a-41)
obl:than(call-20, conspiracy-42)
cop(sub-47, Is-43)
nsubj(sub-47, this-44)
det(sub-47, the-45)
compound(sub-47, right-46)
case(that-49, for-48)
nmod:for(sub-47, that-49)
punct(sub-47, ?-50)

Extracted the following NER entity mentions:
conspiracy	CRIMINAL_CHARGE	-
