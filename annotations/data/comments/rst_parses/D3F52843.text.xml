<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="CoreNLP-to-HTML.xsl" type="text/xsl"?>
<root>
  <document>
    <docId>D3F52843.text</docId>
    <sentences>
      <sentence id="1">
        <tokens>
          <token id="1">
            <word>Im</word>
            <lemma>Im</lemma>
            <CharacterOffsetBegin>0</CharacterOffsetBegin>
            <CharacterOffsetEnd>2</CharacterOffsetEnd>
            <POS>NNP</POS>
            <NER>O</NER>
          </token>
          <token id="2">
            <word>just</word>
            <lemma>just</lemma>
            <CharacterOffsetBegin>3</CharacterOffsetBegin>
            <CharacterOffsetEnd>7</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
          </token>
          <token id="3">
            <word>asking</word>
            <lemma>ask</lemma>
            <CharacterOffsetBegin>8</CharacterOffsetBegin>
            <CharacterOffsetEnd>14</CharacterOffsetEnd>
            <POS>VBG</POS>
            <NER>O</NER>
          </token>
          <token id="4">
            <word>-</word>
            <lemma>-</lemma>
            <CharacterOffsetBegin>15</CharacterOffsetBegin>
            <CharacterOffsetEnd>16</CharacterOffsetEnd>
            <POS>HYPH</POS>
            <NER>O</NER>
          </token>
          <token id="5">
            <word>should</word>
            <lemma>should</lemma>
            <CharacterOffsetBegin>17</CharacterOffsetBegin>
            <CharacterOffsetEnd>23</CharacterOffsetEnd>
            <POS>MD</POS>
            <NER>O</NER>
          </token>
          <token id="6">
            <word>tucker</word>
            <lemma>tucker</lemma>
            <CharacterOffsetBegin>24</CharacterOffsetBegin>
            <CharacterOffsetEnd>30</CharacterOffsetEnd>
            <POS>VB</POS>
            <NER>O</NER>
          </token>
          <token id="7">
            <word>carlson</word>
            <lemma>carlson</lemma>
            <CharacterOffsetBegin>31</CharacterOffsetBegin>
            <CharacterOffsetEnd>38</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
          </token>
          <token id="8">
            <word>be</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>39</CharacterOffsetBegin>
            <CharacterOffsetEnd>41</CharacterOffsetEnd>
            <POS>VB</POS>
            <NER>O</NER>
          </token>
          <token id="9">
            <word>hollowed</word>
            <lemma>hollow</lemma>
            <CharacterOffsetBegin>42</CharacterOffsetBegin>
            <CharacterOffsetEnd>50</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
          </token>
          <token id="10">
            <word>out</word>
            <lemma>out</lemma>
            <CharacterOffsetBegin>51</CharacterOffsetBegin>
            <CharacterOffsetEnd>54</CharacterOffsetEnd>
            <POS>RP</POS>
            <NER>O</NER>
          </token>
          <token id="11">
            <word>and</word>
            <lemma>and</lemma>
            <CharacterOffsetBegin>55</CharacterOffsetBegin>
            <CharacterOffsetEnd>58</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
          </token>
          <token id="12">
            <word>turned</word>
            <lemma>turn</lemma>
            <CharacterOffsetBegin>59</CharacterOffsetBegin>
            <CharacterOffsetEnd>65</CharacterOffsetEnd>
            <POS>VBD</POS>
            <NER>O</NER>
          </token>
          <token id="13">
            <word>into</word>
            <lemma>into</lemma>
            <CharacterOffsetBegin>66</CharacterOffsetBegin>
            <CharacterOffsetEnd>70</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
          </token>
          <token id="14">
            <word>a</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>71</CharacterOffsetBegin>
            <CharacterOffsetEnd>72</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
          </token>
          <token id="15">
            <word>skin</word>
            <lemma>skin</lemma>
            <CharacterOffsetBegin>73</CharacterOffsetBegin>
            <CharacterOffsetEnd>77</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
          </token>
          <token id="16">
            <word>suit</word>
            <lemma>suit</lemma>
            <CharacterOffsetBegin>78</CharacterOffsetBegin>
            <CharacterOffsetEnd>82</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
          </token>
          <token id="17">
            <word>for</word>
            <lemma>for</lemma>
            <CharacterOffsetBegin>83</CharacterOffsetBegin>
            <CharacterOffsetEnd>86</CharacterOffsetEnd>
            <POS>IN</POS>
            <NER>O</NER>
          </token>
          <token id="18">
            <word>an</word>
            <lemma>a</lemma>
            <CharacterOffsetBegin>87</CharacterOffsetBegin>
            <CharacterOffsetEnd>89</CharacterOffsetEnd>
            <POS>DT</POS>
            <NER>O</NER>
          </token>
          <token id="19">
            <word>alien</word>
            <lemma>alien</lemma>
            <CharacterOffsetBegin>90</CharacterOffsetBegin>
            <CharacterOffsetEnd>95</CharacterOffsetEnd>
            <POS>JJ</POS>
            <NER>O</NER>
          </token>
          <token id="20">
            <word>cockroach</word>
            <lemma>cockroach</lemma>
            <CharacterOffsetBegin>96</CharacterOffsetBegin>
            <CharacterOffsetEnd>105</CharacterOffsetEnd>
            <POS>NN</POS>
            <NER>O</NER>
          </token>
          <token id="21">
            <word>,</word>
            <lemma>,</lemma>
            <CharacterOffsetBegin>105</CharacterOffsetBegin>
            <CharacterOffsetEnd>106</CharacterOffsetEnd>
            <POS>,</POS>
            <NER>O</NER>
          </token>
          <token id="22">
            <word>or</word>
            <lemma>or</lemma>
            <CharacterOffsetBegin>107</CharacterOffsetBegin>
            <CharacterOffsetEnd>109</CharacterOffsetEnd>
            <POS>CC</POS>
            <NER>O</NER>
          </token>
          <token id="23">
            <word>has</word>
            <lemma>have</lemma>
            <CharacterOffsetBegin>110</CharacterOffsetBegin>
            <CharacterOffsetEnd>113</CharacterOffsetEnd>
            <POS>VBZ</POS>
            <NER>O</NER>
          </token>
          <token id="24">
            <word>he</word>
            <lemma>he</lemma>
            <CharacterOffsetBegin>114</CharacterOffsetBegin>
            <CharacterOffsetEnd>116</CharacterOffsetEnd>
            <POS>PRP</POS>
            <NER>O</NER>
          </token>
          <token id="25">
            <word>already</word>
            <lemma>already</lemma>
            <CharacterOffsetBegin>117</CharacterOffsetBegin>
            <CharacterOffsetEnd>124</CharacterOffsetEnd>
            <POS>RB</POS>
            <NER>O</NER>
          </token>
          <token id="26">
            <word>been</word>
            <lemma>be</lemma>
            <CharacterOffsetBegin>125</CharacterOffsetBegin>
            <CharacterOffsetEnd>129</CharacterOffsetEnd>
            <POS>VBN</POS>
            <NER>O</NER>
          </token>
          <token id="27">
            <word>?</word>
            <lemma>?</lemma>
            <CharacterOffsetBegin>129</CharacterOffsetBegin>
            <CharacterOffsetEnd>130</CharacterOffsetEnd>
            <POS>.</POS>
            <NER>O</NER>
          </token>
        </tokens>
        <parse>(ROOT (S (NP (NP (NNP Im)) (VP (ADVP (RB just)) (VBG asking))) (HYPH -) (VP (MD should) (VP (VB tucker) (SQ (SQ (NP (NN carlson)) (VP (VB be) (VP (VP (VBN hollowed) (PRT (RP out))) (CC and) (VP (VBD turned) (PP (IN into) (NP (DT a) (NN skin) (NN suit))) (PP (IN for) (NP (DT an) (JJ alien) (NN cockroach))))))) (, ,) (CC or) (SQ (VBZ has) (NP (PRP he)) (ADVP (RB already)) (VP (VBN been)))))) (. ?))) </parse>
        <dependencies type="basic-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">tucker</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">tucker</governor>
            <dependent idx="1">Im</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">asking</governor>
            <dependent idx="2">just</dependent>
          </dep>
          <dep type="acl">
            <governor idx="1">Im</governor>
            <dependent idx="3">asking</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="4">-</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">tucker</governor>
            <dependent idx="5">should</dependent>
          </dep>
          <dep type="nsubj:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="aux:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="8">be</dependent>
          </dep>
          <dep type="dep">
            <governor idx="6">tucker</governor>
            <dependent idx="9">hollowed</dependent>
          </dep>
          <dep type="compound:prt">
            <governor idx="9">hollowed</governor>
            <dependent idx="10">out</dependent>
          </dep>
          <dep type="cc">
            <governor idx="12">turned</governor>
            <dependent idx="11">and</dependent>
          </dep>
          <dep type="conj">
            <governor idx="9">hollowed</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="case">
            <governor idx="16">suit</governor>
            <dependent idx="13">into</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">suit</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="compound">
            <governor idx="16">suit</governor>
            <dependent idx="15">skin</dependent>
          </dep>
          <dep type="obl">
            <governor idx="12">turned</governor>
            <dependent idx="16">suit</dependent>
          </dep>
          <dep type="case">
            <governor idx="20">cockroach</governor>
            <dependent idx="17">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="20">cockroach</governor>
            <dependent idx="18">an</dependent>
          </dep>
          <dep type="amod">
            <governor idx="20">cockroach</governor>
            <dependent idx="19">alien</dependent>
          </dep>
          <dep type="obl">
            <governor idx="12">turned</governor>
            <dependent idx="20">cockroach</dependent>
          </dep>
          <dep type="punct">
            <governor idx="9">hollowed</governor>
            <dependent idx="21">,</dependent>
          </dep>
          <dep type="cc">
            <governor idx="26">been</governor>
            <dependent idx="22">or</dependent>
          </dep>
          <dep type="aux">
            <governor idx="26">been</governor>
            <dependent idx="23">has</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="26">been</governor>
            <dependent idx="24">he</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="26">been</governor>
            <dependent idx="25">already</dependent>
          </dep>
          <dep type="conj">
            <governor idx="9">hollowed</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="27">?</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">tucker</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">tucker</governor>
            <dependent idx="1">Im</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">asking</governor>
            <dependent idx="2">just</dependent>
          </dep>
          <dep type="acl">
            <governor idx="1">Im</governor>
            <dependent idx="3">asking</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="4">-</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">tucker</governor>
            <dependent idx="5">should</dependent>
          </dep>
          <dep type="nsubj:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="aux:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="8">be</dependent>
          </dep>
          <dep type="dep">
            <governor idx="6">tucker</governor>
            <dependent idx="9">hollowed</dependent>
          </dep>
          <dep type="compound:prt">
            <governor idx="9">hollowed</governor>
            <dependent idx="10">out</dependent>
          </dep>
          <dep type="cc">
            <governor idx="12">turned</governor>
            <dependent idx="11">and</dependent>
          </dep>
          <dep type="conj:and">
            <governor idx="9">hollowed</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="case">
            <governor idx="16">suit</governor>
            <dependent idx="13">into</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">suit</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="compound">
            <governor idx="16">suit</governor>
            <dependent idx="15">skin</dependent>
          </dep>
          <dep type="obl:into">
            <governor idx="12">turned</governor>
            <dependent idx="16">suit</dependent>
          </dep>
          <dep type="case">
            <governor idx="20">cockroach</governor>
            <dependent idx="17">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="20">cockroach</governor>
            <dependent idx="18">an</dependent>
          </dep>
          <dep type="amod">
            <governor idx="20">cockroach</governor>
            <dependent idx="19">alien</dependent>
          </dep>
          <dep type="obl:for">
            <governor idx="12">turned</governor>
            <dependent idx="20">cockroach</dependent>
          </dep>
          <dep type="punct">
            <governor idx="9">hollowed</governor>
            <dependent idx="21">,</dependent>
          </dep>
          <dep type="cc">
            <governor idx="26">been</governor>
            <dependent idx="22">or</dependent>
          </dep>
          <dep type="aux">
            <governor idx="26">been</governor>
            <dependent idx="23">has</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="26">been</governor>
            <dependent idx="24">he</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="26">been</governor>
            <dependent idx="25">already</dependent>
          </dep>
          <dep type="conj:or">
            <governor idx="9">hollowed</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="27">?</dependent>
          </dep>
        </dependencies>
        <dependencies type="collapsed-ccprocessed-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">tucker</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">tucker</governor>
            <dependent idx="1">Im</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">asking</governor>
            <dependent idx="2">just</dependent>
          </dep>
          <dep type="acl">
            <governor idx="1">Im</governor>
            <dependent idx="3">asking</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="4">-</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">tucker</governor>
            <dependent idx="5">should</dependent>
          </dep>
          <dep type="nsubj:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="nsubj:pass" extra="true">
            <governor idx="12">turned</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="aux:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="8">be</dependent>
          </dep>
          <dep type="dep">
            <governor idx="6">tucker</governor>
            <dependent idx="9">hollowed</dependent>
          </dep>
          <dep type="compound:prt">
            <governor idx="9">hollowed</governor>
            <dependent idx="10">out</dependent>
          </dep>
          <dep type="cc">
            <governor idx="12">turned</governor>
            <dependent idx="11">and</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="conj:and">
            <governor idx="9">hollowed</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="case">
            <governor idx="16">suit</governor>
            <dependent idx="13">into</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">suit</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="compound">
            <governor idx="16">suit</governor>
            <dependent idx="15">skin</dependent>
          </dep>
          <dep type="obl:into">
            <governor idx="12">turned</governor>
            <dependent idx="16">suit</dependent>
          </dep>
          <dep type="case">
            <governor idx="20">cockroach</governor>
            <dependent idx="17">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="20">cockroach</governor>
            <dependent idx="18">an</dependent>
          </dep>
          <dep type="amod">
            <governor idx="20">cockroach</governor>
            <dependent idx="19">alien</dependent>
          </dep>
          <dep type="obl:for">
            <governor idx="12">turned</governor>
            <dependent idx="20">cockroach</dependent>
          </dep>
          <dep type="punct">
            <governor idx="9">hollowed</governor>
            <dependent idx="21">,</dependent>
          </dep>
          <dep type="cc">
            <governor idx="26">been</governor>
            <dependent idx="22">or</dependent>
          </dep>
          <dep type="aux">
            <governor idx="26">been</governor>
            <dependent idx="23">has</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="26">been</governor>
            <dependent idx="24">he</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="26">been</governor>
            <dependent idx="25">already</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="conj:or">
            <governor idx="9">hollowed</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="27">?</dependent>
          </dep>
        </dependencies>
        <dependencies type="enhanced-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">tucker</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">tucker</governor>
            <dependent idx="1">Im</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">asking</governor>
            <dependent idx="2">just</dependent>
          </dep>
          <dep type="acl">
            <governor idx="1">Im</governor>
            <dependent idx="3">asking</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="4">-</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">tucker</governor>
            <dependent idx="5">should</dependent>
          </dep>
          <dep type="nsubj:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="nsubj:pass" extra="true">
            <governor idx="12">turned</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="aux:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="8">be</dependent>
          </dep>
          <dep type="dep">
            <governor idx="6">tucker</governor>
            <dependent idx="9">hollowed</dependent>
          </dep>
          <dep type="compound:prt">
            <governor idx="9">hollowed</governor>
            <dependent idx="10">out</dependent>
          </dep>
          <dep type="cc">
            <governor idx="12">turned</governor>
            <dependent idx="11">and</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="conj:and">
            <governor idx="9">hollowed</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="case">
            <governor idx="16">suit</governor>
            <dependent idx="13">into</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">suit</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="compound">
            <governor idx="16">suit</governor>
            <dependent idx="15">skin</dependent>
          </dep>
          <dep type="obl:into">
            <governor idx="12">turned</governor>
            <dependent idx="16">suit</dependent>
          </dep>
          <dep type="case">
            <governor idx="20">cockroach</governor>
            <dependent idx="17">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="20">cockroach</governor>
            <dependent idx="18">an</dependent>
          </dep>
          <dep type="amod">
            <governor idx="20">cockroach</governor>
            <dependent idx="19">alien</dependent>
          </dep>
          <dep type="obl:for">
            <governor idx="12">turned</governor>
            <dependent idx="20">cockroach</dependent>
          </dep>
          <dep type="punct">
            <governor idx="9">hollowed</governor>
            <dependent idx="21">,</dependent>
          </dep>
          <dep type="cc">
            <governor idx="26">been</governor>
            <dependent idx="22">or</dependent>
          </dep>
          <dep type="aux">
            <governor idx="26">been</governor>
            <dependent idx="23">has</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="26">been</governor>
            <dependent idx="24">he</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="26">been</governor>
            <dependent idx="25">already</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="conj:or">
            <governor idx="9">hollowed</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="27">?</dependent>
          </dep>
        </dependencies>
        <dependencies type="enhanced-plus-plus-dependencies">
          <dep type="root">
            <governor idx="0">ROOT</governor>
            <dependent idx="6">tucker</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="6">tucker</governor>
            <dependent idx="1">Im</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="3">asking</governor>
            <dependent idx="2">just</dependent>
          </dep>
          <dep type="acl">
            <governor idx="1">Im</governor>
            <dependent idx="3">asking</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="4">-</dependent>
          </dep>
          <dep type="aux">
            <governor idx="6">tucker</governor>
            <dependent idx="5">should</dependent>
          </dep>
          <dep type="nsubj:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="nsubj:pass" extra="true">
            <governor idx="12">turned</governor>
            <dependent idx="7">carlson</dependent>
          </dep>
          <dep type="aux:pass">
            <governor idx="9">hollowed</governor>
            <dependent idx="8">be</dependent>
          </dep>
          <dep type="dep">
            <governor idx="6">tucker</governor>
            <dependent idx="9">hollowed</dependent>
          </dep>
          <dep type="compound:prt">
            <governor idx="9">hollowed</governor>
            <dependent idx="10">out</dependent>
          </dep>
          <dep type="cc">
            <governor idx="12">turned</governor>
            <dependent idx="11">and</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="conj:and">
            <governor idx="9">hollowed</governor>
            <dependent idx="12">turned</dependent>
          </dep>
          <dep type="case">
            <governor idx="16">suit</governor>
            <dependent idx="13">into</dependent>
          </dep>
          <dep type="det">
            <governor idx="16">suit</governor>
            <dependent idx="14">a</dependent>
          </dep>
          <dep type="compound">
            <governor idx="16">suit</governor>
            <dependent idx="15">skin</dependent>
          </dep>
          <dep type="obl:into">
            <governor idx="12">turned</governor>
            <dependent idx="16">suit</dependent>
          </dep>
          <dep type="case">
            <governor idx="20">cockroach</governor>
            <dependent idx="17">for</dependent>
          </dep>
          <dep type="det">
            <governor idx="20">cockroach</governor>
            <dependent idx="18">an</dependent>
          </dep>
          <dep type="amod">
            <governor idx="20">cockroach</governor>
            <dependent idx="19">alien</dependent>
          </dep>
          <dep type="obl:for">
            <governor idx="12">turned</governor>
            <dependent idx="20">cockroach</dependent>
          </dep>
          <dep type="punct">
            <governor idx="9">hollowed</governor>
            <dependent idx="21">,</dependent>
          </dep>
          <dep type="cc">
            <governor idx="26">been</governor>
            <dependent idx="22">or</dependent>
          </dep>
          <dep type="aux">
            <governor idx="26">been</governor>
            <dependent idx="23">has</dependent>
          </dep>
          <dep type="nsubj">
            <governor idx="26">been</governor>
            <dependent idx="24">he</dependent>
          </dep>
          <dep type="advmod">
            <governor idx="26">been</governor>
            <dependent idx="25">already</dependent>
          </dep>
          <dep type="dep" extra="true">
            <governor idx="6">tucker</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="conj:or">
            <governor idx="9">hollowed</governor>
            <dependent idx="26">been</dependent>
          </dep>
          <dep type="punct">
            <governor idx="6">tucker</governor>
            <dependent idx="27">?</dependent>
          </dep>
        </dependencies>
      </sentence>
    </sentences>
  </document>
</root>
