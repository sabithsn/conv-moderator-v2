0	1	Do	do	VB	aux	3	O	 (ROOT (S (VP (VB Do)	1	1
0	2	n't	not	RB	advmod	3	O	 (RB n't)	1	1
0	3	do	do	VB	root	0	O	 (VP (VB do)	1	1
0	4	that	that	DT	obj	3	O	 (NP (DT that))))	1	1
0	5	.	.	.	punct	3	O	 (. .)))	1	1
1	1	Let	let	VB	root	0	O	 (ROOT (S (VP (VB Let)	1	1
1	2	's	's	PRP	nsubj	4	O	 (S (NP (PRP 's))	2	1
1	3	not	not	RB	advmod	4	O	 (RB not)	2	1
1	4	make	make	VB	ccomp	1	O	 (VP (VB make)	2	1
1	5	fun	fun	NN	obj	4	O	 (NP (NP (NN fun))	2	1
1	6	of	of	IN	mark	9	O	 (PP (IN of)	2	1
1	7	how	how	WRB	advmod	9	O	 (SBAR (WHADVP (WRB how))	2	1
1	8	she	she	PRP	nsubj	9	O	 (S (NP (PRP she))	2	1
1	9	looks	look	VBZ	acl	5	O	 (VP (VBZ looks)))))))))	2	1
1	10	.	.	.	punct	1	O	 (. .)))	2	1
2	1	To	to	TO	mark	3	O	 (ROOT (S (S (VP (TO To)	2	1
2	2	be	be	VB	cop	3	O	 (VP (VB be)	3	1
2	3	fair	fair	JJ	advcl	10	O	 (ADJP (JJ fair)))))	3	1
2	4	,	,	,	punct	10	O	 (, ,)	3	1
2	5	aunt	aunt	NN	compound	6	O	 (NP (NN aunt)	3	1
2	6	jemima	jemima	NNP	nsubj	10	O	 (NNP jemima))	4	1
2	7	was	be	VBD	cop	10	O	 (VP (VBD was)	4	1
2	8	never	never	RB	advmod	10	O	 (ADVP (RB never))	4	1
2	9	very	very	RB	advmod	10	O	 (ADJP (RB very)	4	1
2	10	attractive	attractive	JJ	root	0	O	 (JJ attractive)))))	4	1
